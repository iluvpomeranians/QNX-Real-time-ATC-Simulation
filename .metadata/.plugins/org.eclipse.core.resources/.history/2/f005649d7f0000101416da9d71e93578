#include <iostream>
#include <fcntl.h>
#include <sys/mman.h>
#include <pthread.h>
#include <math.h>
#include <stdbool.h>

#define SHM_NAME "/air_traffic_shm"
#define MAX_AIRCRAFT 100

struct AircraftData{
	int id;
	double x,y,z;
	double speedX, speedY, speedZ;
	bool detected;
	bool responded;
}

//Shared Mem Ptr
AircraftData* aircrafts;
pthread_mutex_t shm_mutex = PTHREAD_MUTEX_INITIALIZER;

void* violationCheck(void* arg){//this void arg is required for pthread apparently
	while(1){
		sleep(5);//Not sure - says we should update display every 5 sec
		pthread_mutex_lock(&shm_mutex);

		std::cout << "Checking for Safety Violations..." << std::endl;

		for (int i = 0; i < MAX_AIRCRAFT; i++){
			for (int j = i + 1; j < MAX_AIRCRAFT; j++){
				double dx = std::fabs(aircrafts[i].x - aircrafts[j].x);
				double dy = std::fabs(aircrafts[i].y - aircrafts[j].y);
				double dz = std::fabs(aircrafts[i].z - aircrafts[j].z);

				//Euclid horizontal distance d = sqrt((x1-x2)^2 + (y1 - y2)^2)
				double horiziontalXYDiff = std::sqrt(dx*dx + dy*dy);

				//Aircraft must have a distance no less than 1000 units in height
				//and 3000 units width/length from other aircraft
				if (horizontalXYDiff < 3000 || dz < 1000){
					sendAlert(aircrafts[i].id, aircrafts[j].id]);
				}
			}
		}

		pthread_mutex_unlock(&shm_mutex);

	}
}

int main() {
	cout << "Hello World!!!" << endl; // prints Hello World!!!
	return 0;
}
